// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	domain "case-study/leo/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// GetBySubject provides a mock function with given fields: ctx, req
func (_m *BookRepository) GetBySubject(ctx context.Context, req domain.BookGetBySubjectRequest) (domain.BookGetBySubjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBySubject")
	}

	var r0 domain.BookGetBySubjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BookGetBySubjectRequest) (domain.BookGetBySubjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BookGetBySubjectRequest) domain.BookGetBySubjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.BookGetBySubjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BookGetBySubjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCanBorrowBookByID provides a mock function with given fields: ctx, id
func (_m *BookRepository) GetCanBorrowBookByID(ctx context.Context, id string) (domain.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCanBorrowBookByID")
	}

	var r0 domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCanBorrowBook provides a mock function with given fields: ctx, books
func (_m *BookRepository) SaveCanBorrowBook(ctx context.Context, books []domain.Book) error {
	ret := _m.Called(ctx, books)

	if len(ret) == 0 {
		panic("no return value specified for SaveCanBorrowBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Book) error); ok {
		r0 = rf(ctx, books)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
